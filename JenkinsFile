pipeline {
    agent any

    // ENVIRONMENT VARIABLES
    environment {
        NODE_ENV = 'development'
        DOCKER_IMAGE = "my-tito-app:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-registry-credentials')  // Fetch credentials
        DOCKER_REGISTRY = 'docker.io/myapp'
    }

    // STAGES
    stages {
        // Step 1: Install Dependencies
        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        echo 'Installing dependencies...'
                        // Use caching to speed up npm install
                        cache(path: 'node_modules', key: 'npm-cache-${BUILD_NUMBER}', fallback: true) {
                            sh 'npm install'
                        }
                    } catch (err) {
                        echo 'Error installing dependencies!'
                        currentBuild.result = 'FAILURE' // Mark the build as failed
                        error "Aborting build due to failed dependency installation."
                    }
                }
            }
        }

        // Step 2: Run Tests (parallel with Lint)
        stage('Run Tests') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            try {
                                echo 'Running unit tests...'
                                sh 'npm test'
                            } catch (err) {
                                echo 'Unit tests failed!'
                                currentBuild.result = 'FAILURE'
                                error "Aborting build due to failed unit tests."
                            }
                        }
                    }
                }
                stage('Linting') {
                    steps {
                        script {
                            try {
                                echo 'Running code linting...'
                                sh 'npm run lint'
                            } catch (err) {
                                echo 'Linting failed!'
                                currentBuild.result = 'FAILURE'
                                error "Aborting build due to failed linting."
                            }
                        }
                    }
                }
            }
        }

        // Step 3: Build and Package (Docker or traditional packaging)
        stage('Build and Package') {
            steps {
                script {
                    try {
                        echo 'Building Docker image...'
                        sh 'docker build -t ${DOCKER_IMAGE} .'
                        echo 'Pushing Docker image to registry...'
                        sh "docker tag ${DOCKER_IMAGE} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                        sh "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                    } catch (err) {
                        echo 'Docker build or push failed!'
                        currentBuild.result = 'FAILURE'
                        error "Aborting build due to Docker image build/push failure."
                    }
                }
            }
        }

        // Step 4: Deploy to Staging
        stage('Deploy to Staging') {
            environment {
                NODE_ENV = 'staging'
            }
            steps {
                script {
                    try {
                        echo 'Deploying to staging...'
                        sh "docker run -d -e NODE_ENV=staging -p 3000:3000 ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                    } catch (err) {
                        echo 'Failed to deploy to staging!'
                        currentBuild.result = 'FAILURE'
                        error "Aborting build due to failed staging deployment."
                    }
                }
            }
        }

        // Step 5: Manual Approval before Production Deployment
        stage('Approval') {
            steps {
                input message: 'Approve deployment to production?', ok: 'Deploy'
            }
        }

        // Step 6: Deploy to Production
        stage('Deploy to Production') {
            environment {
                NODE_ENV = 'production'
            }
            steps {
                script {
                    try {
                        echo 'Deploying to production...'
                        sh "docker run -d -e NODE_ENV=production -p 80:3000 ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                    } catch (err) {
                        echo 'Failed to deploy to production!'
                        currentBuild.result = 'FAILURE'
                        error "Aborting build due to failed production deployment."
                    }
                }
            }
        }
    }

    post {
    success {
        echo 'Build and deployment succeeded!'
        // Send email notification for success
        mail to: 'your-email@example.com',
             subject: "SUCCESS: Build #${BUILD_NUMBER} was successful!",
             body: """The Jenkins build and deployment succeeded.
                     
                     Project: ${JOB_NAME}
                     Build Number: ${BUILD_NUMBER}
                     Build URL: ${BUILD_URL}
                     
                     Please check the application in production.
                  """
    }

    failure {
        echo 'Build failed!'
        // Send email notification for failure
        mail to: 'your-email@example.com',
             subject: "FAILED: Build #${BUILD_NUMBER} failed!",
             body: """The Jenkins build failed.

                     Project: ${JOB_NAME}
                     Build Number: ${BUILD_NUMBER}
                     Build URL: ${BUILD_URL}

                     Please investigate the issue.
                  """
    
            // Rollback to previous stable version in production
            script {
                try {
                    echo 'Rolling back to the previous version...'
                    sh "docker run -d -e NODE_ENV=production -p 80:3000 ${DOCKER_REGISTRY}:previous-stable-version"
                } catch (err) {
                    echo 'Rollback failed!'
                    error "Rollback to previous version failed. Manual intervention needed."
                }
            }
        }

        always {
            // Clean up Docker images to prevent storage issues
            script {
                try {
                    echo 'Cleaning up Docker images...'
                    sh 'docker system prune -f'
                } catch (err) {
                    echo 'Docker image cleanup failed!'
                }
            }
        }
    }
}
